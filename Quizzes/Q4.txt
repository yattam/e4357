BEGIN
--------------------------------------------------------------------
Q1: Implement the following inline functions: 

inline int CircularBufferIsFull(CircularBuffer* que)
{
  return (que->readPointer == ((que->writePointer + 1)&que->mask));
}

inline int CircularBufferIsEmpty(CircularBuffer* que)
{
	return (que->writePointer == que->readPointer );
}

--------------------------------------------------------------------
Q2: How to compute "Interrupt Latency"?

Time [interrupt disabled] + Time [process higher priority interrupt] + Time [OS bookkeeping] + Time [Context Switch]

--------------------------------------------------------------------
Q3: Serial pc(USBTX, USBRX); // tx, rx 
    What API (function) do you use to change the baud rate?

    For example, I can call pc.baud(9600)

--------------------------------------------------------------------
Q4: How many bit(s) does TDO have? Is TDO an input or output type? (Ref: JTAG Pins) 

It is serial data output pin.  TDO has 1-bit.

--------------------------------------------------------------------
Q5:
What is the address of ledArr[0]? 
It is in the heap  an the address is 0x1000015c 

What is the address of ch? 
It is in the stack an the adress is 0x10007ff8

I ran the following code on the mbed. and print out the requested addresses.
/* 
* Enter a hex number [0-9a-fA-F]; Decode it in 4-bit binary format and display them on 4 on board leds. 
*/ 

#include "mbed.h" 

Serial pc(USBTX, USBRX); // tx, rx 
DigitalOut ledArr[4] = {DigitalOut(LED1), DigitalOut(LED2), DigitalOut(LED3), DigitalOut(LED4)}; 

void DisplayLed(int ch) 
{ 
	int i=0;

	if (ch>='0' && ch<='9')
		ch-='0';
	else if (ch>='A' && ch<='F') {
		ch-='A';
		ch+=10;
	} else if (ch>='a' && ch<='f') {
		ch-='a';
		ch+=10;
	} else
		ch=0;

	for (i=0; i<4; i++) { 
		if(ch& (1<<i))
			ledArr[i] = 1; 
		else
			ledArr[i] = 0;
	} 
} 

int main(void) { 
	int ch; 
	pc.baud(9600); 
	pc.printf("\r\nHello World!"); 
	while(1) { 
		pc.printf("\r\nEnter:"); 
		ch = pc.getc(); 
		pc.putc(ch); 
		DisplayLed(ch); 
	} 
}
